require "erb"

# ------------------------------------------------------------------------------------------------------------------------
#  Generated by jasmine
# ------------------------------------------------------------------------------------------------------------------------

begin
  require 'jasmine'
  load 'jasmine/tasks/jasmine.rake'
rescue LoadError
  task :jasmine do
    abort "Jasmine is not available. In order to run jasmine, you must: (sudo) gem install jasmine"
  end
end

task :server do
    `thin -R static.ru start`
end

# Generate the epub module 
def render_annotations_module_template(template_file_path, output_file_path, path_from_executing_dir)

    # Read each of the library components
    text_line_inferrer = File.read(path_from_executing_dir + '/src/models/text_line_inferrer.js')
    highlight = File.read(path_from_executing_dir + '/src/models/highlight.js')
    underline = File.read(path_from_executing_dir + '/src/models/underline.js')
    bookmark = File.read(path_from_executing_dir + '/src/models/bookmark.js')
    bookmark_view = File.read(path_from_executing_dir + '/src/views/bookmark_view.js')
    highlight_view = File.read(path_from_executing_dir + '/src/views/highlight_view.js')
    highlight_group = File.read(path_from_executing_dir + '/src/models/highlight_group.js')
    underline_view = File.read(path_from_executing_dir + '/src/views/underline_view.js')
    underline_group = File.read(path_from_executing_dir + '/src/models/underline_group.js')
    annotations = File.read(path_from_executing_dir + '/src/models/annotations.js')
    image_annotation = File.read(path_from_executing_dir + '/src/models/image_annotation.js')
    reflowable_annotations = File.read(path_from_executing_dir + '/src/models/reflowable_annotations.js')

    template = File.read(template_file_path)
    erb = ERB.new(template)
    
    # Generate library
    File.open(output_file_path, "w") do |f|
        f.puts erb.result(binding)
    end
end

def get_template_name
    return "annotations_module_template.js.erb"
end

def get_module_name
    return "annotations_module.js"
end

def get_this_directory
    return File.dirname(__FILE__)
end

def get_parent_directory
    return File.expand_path("..", File.dirname(__FILE__))
end

# ------------------------------------------------------------------------------------------------------------------------
#  Tasks
# ------------------------------------------------------------------------------------------------------------------------

task :server do
    puts `thin -R static.ru start`
end

# Rationale: Tasks in this Rakefile can be executed from some other directory using the following command: 
#   rake -f path/to/this/Rakefile gen_module. If this task is executed in this manner, the current working directory
#   is not relative to this Rakefile and thus the paths must be correctly resolved with the passed parameters.
desc "get the dependencies for the epub reflowable module"
task :copy_dependencies do
  
  module_name = get_module_name()
  puts ":copy_dependencies => #{module_name}"
  
    path_to_this_dir = get_this_directory()
    parent_dir = get_parent_directory()

    # Generate this module, which will import it into this module's lib directory
    #Rake::Task[:gen_module].invoke()

    # Import other dependencies
    lib_dependency_filenames = [
        "jquery-1.9.1.js",
        "json2.js",
        "underscore-1.4.4.js",
        "backbone-0.9.10.js",
        "URI-1.10.0.js",
        "modernizr-2.5.3.min.js"
    ]

    module_dependency_filenames = [
        "epub_cfi.js",
        "epub_reflowable_module.js",
        "epub_reader_module.js",
        "epub_reading_system.js",
        "annotations_module.js"
    ]

    # Get all the lib dependencies
    lib_dependency_filenames.each do |filename|
      puts "---> #{filename}"
        `cp -a "#{parent_dir}/lib/#{filename}" "#{path_to_this_dir}/lib/#{filename}"`
    end

    # Get all the epub module dependencies
    module_dependency_filenames.each do |filename|
      puts "---> #{filename}"
        `cp -a "#{parent_dir}/development/#{filename}" "#{path_to_this_dir}/lib/#{filename}"`
    end
end

desc "render the epub reflowable module erb template"
task :gen_module do
  
  module_name = get_module_name()
  puts ":gen_module => #{module_name}"
  
    path_to_this_dir = get_this_directory()
    parent_dir = get_parent_directory()
    template_file_path = path_to_this_dir + "/src/templates/" + get_template_name()
    output_module_file_path = parent_dir + "/development/#{module_name}"

    render_annotations_module_template(template_file_path, output_module_file_path, path_to_this_dir)
    `cp -a "#{parent_dir}/development/#{module_name}" "#{path_to_this_dir}/lib"`
end