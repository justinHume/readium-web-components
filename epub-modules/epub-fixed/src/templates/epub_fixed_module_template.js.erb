var EpubFixedModule = function (spineObjects, viewerSettingsObject) {

    var EpubFixed = {};

    // Rationale: The order of these matters
    <%= fixed_page_number_logic %>
    <%= fixed_page_views %>
    <%= fixed_sizing %>
    <%= fixed_layout_style %>
    <%= fixed_page_view %>
    <%= image_page_view %>
    <%= fixed_pagination_view %>
    <%= fixed_customizer %>
    <%= fixed_custom_page_border %>
    <%= fixed_custom_epub_border %>
    <%= fixed_custom_spine_divider %>

    var fixedView = new EpubFixed.FixedPaginationView({
        spineObjects : spineObjects,
        viewerSettings : viewerSettingsObject
    });

    // Description: The public interface
    return {

        render : function (goToLastPage, hashFragmentId) {
            return fixedView.render(goToLastPage, hashFragmentId);
        },
        nextPage : function () {
            return fixedView.nextPage();
        },
        previousPage : function () {
            return fixedView.previousPage();
        },
        showPageByHashFragment : function (hashFragmentId) {
            return;
        },
        showPageByNumber : function (pageNumber) {
            return fixedView.showPageNumber(pageNumber);
        },
        showPageByCFI : function (CFI) {
            return;
        },
        numberOfPages : function () {
            return fixedView.fixedPageViews.get("fixedPages").length;
        },
        currentPage : function () {
            return fixedView.fixedPageViews.get("currentPages");
        },
        onFirstPage : function () {
            return fixedView.fixedPageViews.onFirstPage();
        },
        onLastPage : function () {
            return fixedView.fixedPageViews.onLastPage();
        },
        showPagesView : function () {
            return fixedView.showPagesView();
        },
        hidePagesView : function () {
            return fixedView.hidePagesView();
        },
        setSyntheticLayout : function (isSynthetic) {
            return fixedView.setSyntheticLayout(isSynthetic);
        },
        on : function (eventName, callback, callbackContext) {
            return fixedView.on(eventName, callback, callbackContext);
        },
        off : function (eventName, callback) {
            return fixedView.off(eventName, callback);
        },
        resizeContent : function () {
            return fixedView.resizePageViews();
        },
        customize : function (customProperty, styleNameOrCSS) {
            fixedView.customize(customProperty, styleNameOrCSS);
            return this;
        }
    };
};
