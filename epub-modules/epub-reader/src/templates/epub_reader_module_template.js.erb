var EpubReaderModule = function(readerBoundElement, epubSpineInfo, viewerSettings, packageDocumentDOM, renderStrategy) {

    var EpubReader = {};

    // Rationale: The order of these matters
    <%= load_strategy %>
    <%= epub_reader %>
    <%= epub_reader_view %>

    var epubReaderView = new EpubReader.EpubReaderView({
        readerElement : readerBoundElement,
        spineInfo : epubSpineInfo,
        viewerSettings : viewerSettings,
        packageDocumentDOM : packageDocumentDOM,
        renderStrategy : renderStrategy
    });

    // Description: The public interface
    return {

        render : function () {
            return epubReaderView.render();
        },
        showFirstPage : function (callback, callbackContext) {
            return epubReaderView.showFirstPage(callback, callbackContext);
        },
        showSpineItem : function (spineIndex, callback, callbackContext) {
            return epubReaderView.showSpineItem(spineIndex, callback, callbackContext);
        },
        showPageByCFI : function (CFI, callback, callbackContext) {
            return epubReaderView.showPageByCFI(CFI, callback, callbackContext);
        },
        showPageByElementId : function (spineIndex, hashFragmentId, callback, callbackContext) {
            return epubReaderView.showPageByElementId(spineIndex, hashFragmentId, callback, callbackContext);
        },
        nextPage : function (callback, callbackContext) {
            return epubReaderView.nextPage(callback, callbackContext);
        },
        previousPage : function (callback, callbackContext) {
            return epubReaderView.previousPage(callback, callbackContext);
        },
        setSyntheticLayout : function (isSynthetic) {
            return epubReaderView.setSyntheticLayout(isSynthetic);
        },
        on : function (eventName, callback, callbackContext) {
            return epubReaderView.attachEventHandler(eventName, callback, callbackContext);
        },
        off : function (eventName) {
            return epubReaderView.removeEventHandler(eventName);
        },
        getViewerSettings : function () {
            return epubReaderView.getViewerSettings();
        },
        resizeContent : function () {
            return epubReaderView.reader.fitCurrentPagesView();
        },
        customize : function (customProperty, styleNameOrCSS) {
            epubReaderView.customize(customProperty, styleNameOrCSS);
            return this;
        },
        addSelectionHighlight : function (id, type) { 
            return epubReaderView.addSelectionHighlight(id, type); 
        },
        addSelectionBookmark : function (id, type) { 
            return epubReaderView.addSelectionBookmark(id, type); 
        },
        addSelectionImageAnnotation : function (id) {
            return epubReaderView.addSelectionImageAnnotation(id);
        },
        addHighlight : function (CFI, id, type, callback, callbackContext) { 
            return epubReaderView.addHighlight(CFI, id, type, callback, callbackContext); 
        },
        addBookmark : function (CFI, id, type, callback, callbackContext) { 
            return epubReaderView.addBookmark(CFI, id, type, callback, callbackContext); 
        },
        addImageAnnotation : function (CFI, id, callback, callbackContext) { 
            return epubReaderView.addImageAnnotation(CFI, id, callback, callbackContext); 
        }
    };
};
